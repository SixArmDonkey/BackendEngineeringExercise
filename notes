Goals:

1) Create an employer-focused system for adding incentive types
2) Incentives are selected by employers and activated as part of their account
3) Incentive handling may be triggered by: (a + b).  c is a no go.
  a) A visitor object attached to various logging endpoints (quick/may slow down action depending on incentive handler) 
  b) If this is going to be a microservice, then some sort of incentive logging endpoint is required.  Coupling this with the above may be best.  
  c) A processing application for bulk event log processing (slow/resource intensive) - This would be an option if and only if the incentive system did not have programmatic access to the event logging endpoints


Caveats:

1) Incentives may require meta data, which means persistence layer read/writes.
2) Incentives must have the capability of maintaining state.  We need to know if an action is waiting for additional data or if it has been completed.
3) 

Assumptions:

1) The client has authenticated write access to the api
2) The client is sending the following data:
  a) The employer's unique identifier
  b) The user's unique identifier 
  c) An event name or some unique identifier that can be linked to an incentive 
3) The event logging system implements the visitor pattern and can accept multiple visitors for additional event processing
4) The employer's incentive management dashboard exists


Scaling writes:

1) Writes can be deferred by adding them to a processing queue
2) One or more incentive processing applications may read from this queue to process incentive events
3) The processing application may be better suited for a language that supports threading to take advantage of available hardware

